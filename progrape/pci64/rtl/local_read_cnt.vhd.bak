-- LOCAL READ CONTROLLER ( ifpga <- pfpga )
-- by Tsuyoshi Hamada
--
-- CLK            __~~ __~~ __~~ __~~ __~~ __~~ __~~ __~~ __~~ __~~ __~~ __~~ __~~ __~~ __~~ __~~ __~~
-- CALC_DONE      ___/~~~~\____
-- BUSY               ___/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\_______________
-- hit1               ___/~~~~\____
-- c_nchip               < NC                >< NC -1                           >< negativ value
-- next_chip                          ___/~~~~\____                      ___/~~~~\____
--==================================================
-- CLK            __~~ __~~ __~~ __~~ __~~ __~~ __~~ __~~ __~~ __~~ __~~ __~~ __~~ __~~ __~~ __~~ __~~
-- CALC_DONE      ___/~~~~\____
-- c_npipe               < NP                >< NP -1                           >< negativ value
-- next_pipe


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;

entity local_read_cnt is
  port (
    -- from PGPG_REG3
    NCHIP : in std_logic_vector(1 downto 0);     -- (number of chips) - 1
    NPIPE : in std_logic_vector(7 downto 0);     -- (number of pipelines) - 1
    NFI   : in std_logic_vector(7 downto 0);     -- (number of fi registers in a pipe) - 1
    CALC_DONE : in std_logic;   -- pulse
    -- to GPREG0
    BUSY  : out std_logic;

    -- to LOCAL_READ_IF
    EXEC     : out std_logic;                     -- pulse
    START_AD : out std_logic_vector(18 downto 0); -- 19 bit
    NQWORD   : out std_logic_vector( 8 downto 0); --  9 bit
    CHIPSEL  : out std_logic_vector( 3 downto 0); --  4 bit
    MEM_AD_BASE : out std_logic_vector(12 downto 0);
    -- from LOCAL_READ_IF
    BUSY_IF : in std_logic;
 
    RST : in  std_logic;
    CLK : in  std_logic
    );
end local_read;

architecture rtl of local_read is

signal hit0,hit1,hit2 : std_logic :='0';
signal c_nchip,c_nchipr  : std_logic_vector(2 downto 0) := (others=>'0');
signal c_npipe,c_npiper  : std_logic_vector(7 downto 0) := (others=>'0');
signal c_nfi  ,c_nfir    : std_logic_vector(7 downto 0) := (others=>'0');
signal next_chip, next_pipe : std_logic :='0';

begin

  hit0 <= CALC_DONE;
  process (CLK) begin
    if (CLK'event and CLK='1') then
      hit2 <= hit1;
      hit1 <= hit0;
    end if;
  end process;

  -- BUSY
  process (RST,CLK,c_nchip) begin
    if (RST = '1') then
      BUSY <= '0';
    elsif (CLK'event and CLK='1') then
      if((hit0 = '1') AND (hit1 = '0')) then
        BUSY <= '1';
      elsif(c_nchip(2) = '1') then
        BUSY <= '0';
      end if;
    end if;
  end process;


  -- NCHIP COUNTER
  c_nchipr <= c_nchip - "01";
  process (RST,CLK,next_chip) begin
    if (RST = '1') then
      c_nchip <= (others=>'0');
    elsif (CLK'event and CLK='1') then
      if((hit0 = '1') AND (hit1 = '0')) then
        c_nchip <= "0" & NCHIP;              -- SIGNED VALUE
      elsif (next_chip='1') then
        c_nchip <= c_nchipr;
      end if;
    end if;
  end process;

  

